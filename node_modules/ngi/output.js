var path = require('path');
var fs   = require('fs');
var zlib = require('zlib');
var mime = require('mime');

function cacheControl(req, res, maxAge) {
    if(maxAge) {
        var expires = new Date().getTime() + maxAge * 1000;
        res.setHeader("Expires", new Date(expires).toUTCString());
        res.setHeader("Cache-Control", "max-age=" + maxAge);
    }
    else {
        res.setHeader("Cache-Control", "no-cache");
    }
}

function parseEncoding(req, res) {
    var acceptEncoding = req.headers['accept-encoding'];
    if(acceptEncoding) {
        var encoding = acceptEncoding.match(/\b(gzip|deflate)\b/);
        if(encoding) {
            res.setHeader("Content-Encoding", encoding[0]);
            return encoding[0];
        }
    }
    return '';
}

function outputPartialContent(req, res, filePath, size, ranges) {
    if(ranges.substr(0,6) === 'bytes=') {
        var range = ranges.substr(6).split("-");
        var start = parseInt(range[0], 10);
        var end = parseInt(range[1], 10);
        if(!isNaN(start) || !isNaN(end)) {
            if(isNaN(start)) {
                start = -end;
                end = -1;
            }
            if(isNaN(end)) end = -1;
            if(start < 0) start += size;
            if(end < 0) end += size;
            if(0 <= start && start < end && end < size) {
                res.setHeader("Content-Length", end - start + 1);
                res.setHeader("Content-Range", "bytes "+start+"-"+end+"/"+size);
                res.writeHead(206, {'Content-Type': mime.lookup(filePath)});

                var stream = fs.createReadStream(filePath, {start: start, end: end});
                stream.pipe(res);
                return;
            }
        }
    }
    res.writeHead(416, {'Content-Type': 'text/plain'});
    res.end('416 Request Range Not Satisfiable(' + ranges + ')');
}

function outputContent(req, res, filePath, size) {
    var ctype = mime.lookup(filePath);
    var encoding = ctype.slice(0, 5) === 'text/' ? parseEncoding(req, res) : '';
    if(!encoding) res.setHeader("Content-Length", size);
    res.writeHead(200, {'Content-Type': ctype});

    var stream = fs.createReadStream(filePath);
    switch(encoding) {
    case 'gzip':
        stream.pipe(zlib.createGzip()).pipe(res);
        break;
    case 'deflate':
        stream.pipe(zlib.createDeflate()).pipe(res);
        break;
    default:
        stream.pipe(res);
    }
}

function output(req, res, filePath) {
    fs.stat(filePath, function(err, stats) {
        if(err || !stats.isFile() || filePath.indexOf('/../') >= 0) {
            res.writeHead(404, {'Content-Type': 'text/plain'});
            res.end('404 Not Found ' + filePath);
        }
        else {
            var lastModified = stats.mtime.toUTCString();
            res.setHeader("Last-Modified", lastModified);
            if(req.headers["if-modified-since"] === lastModified) {
                res.writeHead(304, {'Content-Type': 'text/plain'});
                res.end('304 Not Modified');
            }
            else {
                res.setHeader('Accept-Ranges', 'bytes');
                var ranges = req.headers["range"];
                if(ranges) {
                    outputPartialContent(req, res, filePath, stats.size, ranges);
                }
                else {
                    cacheControl(req, res, !filePath.match(/\.json$/) ? 600 : 0);
                    outputContent(req, res, filePath, stats.size);
                }
            }
        }
    });
}

exports.output = output;
