function find(buf, offset, str) {
    var len = str.length;
    for(var i=0; i < len; i++)
        if(buf[offset+i] != str[i]) return false;
    return true;
}

function match(buf, start, end, str) {
    for(var i=start; i < end; i++)
        if(find(buf, i, str)) return i;
    return -1;
}

function splitHead(line) {
    var head = {};
    for(var i in line) {
        var p = line[i].indexOf(':');
        if(p < 0) continue;

        var key = line[i].slice(0,p).trim().toLowerCase();
        var val = line[i].slice(p+1).trim();
        if(key == 'content-disposition') {
            var elm = val.split(';');
            var tmp = {};
            for(var j in elm) {
                var m = elm[j].match(/([^\s]+)\s*=\s*(?:"([^"]*)"|([^\s]*))/);
                if(m) tmp[m[1].toLowerCase()] = m[2] || m[3] || '';
            }
            head[key] = tmp;
        }
        else head[key] = val;
    }
    return head;
}

function splitPart(rows, start, end) {
    var CRLF2 = new Buffer('\r\n\r\n');
    var arg = {};
    var pos = match(rows, start, end-4, CRLF2);
    if(pos >= 0) {
        var head = splitHead(rows.toString('utf8', start, pos).split('\r\n'));
        var d = head['content-disposition'];
        arg[d.name] = d.filename
                    ? { 'name' : d.filename,
                        'type' : head['content-type'],
                        'file' : rows.slice(pos+4, end-2) }
                    : rows.toString('utf8', pos+4, end-2);
    }
    return arg;
}

function splitMultiPart(boundary, rows) {
    var sep   = new Buffer('--' + boundary);
    var CRLF  = new Buffer('\r\n');
    var index = [];
    var start = 0;
    var end   = rows.length - (sep.length+2);
    while((start = match(rows, start, end, sep)) >= 0) {
        index.push(start);
        start += sep.length;
        if(!find(rows, start, CRLF)) break;
        start += 2;
        index.push(start);
    }
    return index;
}

function parse(boundary, rows) {
    var index = splitMultiPart(boundary, rows);
    var args = {};
    for(var i=1; i < index.length; i+=2) {
        var o = splitPart(rows, index[i], index[i+1]);
        for(var n in o) args[n] = o[n];
    }
    return args;
}

exports.parse = parse;
