var url  = require('url');
var qs   = require('querystring');
var part = require('./multipart.js');
var docs = require('./output.js');
var _map = {bin: {}, exp: {}, doc: 'docs', ext: '.html'};

function exp_map(path) {
    for(var n in _map.exp) {
        try {
            if(RegExp(n).test(path)) return _map.exp[n];
        }
        catch(err) {
            console.log("_map.exp['" + n + "']");
        }
    }
    return null;
}

function service(req, res, path) {
    var exec = exp_map(path);
    if(typeof(exec)==='function') {
        path = exec(req, res, path);
        if(!path) return;
    }
    if(typeof(_map.bin[path])==='function') _map.bin[path](req, res);
    else {
        var file = _map.doc+path;
        if(file.substr(-1)==='/') file += 'index'+_map.ext;
        docs.output(req, res, file);
    }
}

function mistake(err, res) {
    res.writeHead(500, {'Content-Type': 'text/plain'});
    res.end('500 Internal Server Error(' + err + ')');
}

function cgi_post_parse(req, res, rows) {
    var path = qs.unescape(url.parse(req.url).pathname);
    var type = req.headers['content-type'] || '';
    if(type.match(/octet-stream/i)) {
        req.body = {
            'name' : req.headers['x-file-name'],
            'type' : req.headers['x-file-type'],
            'file' : rows
        };
        service(req, res, path);
    }
    else if(type.match(/urlencoded/i)) {
        req.body = qs.parse(rows.toString());
        service(req, res, path);
    }
    else if(type.match(/json/i)) {
        req.body = JSON.parse(rows.toString());
        service(req, res, path);
    }
    else if(type.match(/multipart/i)) {
        var m = type.match(/boundary=(?:"([^"]+)"|([^;]+))/i);
        if(m) {
            req.body = part.parse(m[1]||m[2], rows);
            service(req, res, path);
        }
        else mistake(3, res);
    }
    else mistake(2, res);
}

function cgi_get(req, res) {
    var u = url.parse(req.url, true);
    req.body = u.query;
    service(req, res, qs.unescape(u.pathname));
}

function cgi_post(req, res) {
    var chunks = [];
    req.on('data', function(data) {
        chunks.push(data);
    });
    req.on('end', function() {
        cgi_post_parse(req, res, Buffer.concat(chunks));
    });
}

function cgi_options(req, res) {
    res.writeHead(200, {
        'Content-Type': 'text/plain',
        'Access-Control-Allow-Origin': req.headers.origin || '',
        'Access-Control-Allow-Credentials': 'true',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': req.headers['access-control-request-headers'] || ''
    });
    res.end();
}

function cgi(req, res) {
    switch(req.method) {
    case 'GET':
        cgi_get(req, res);
        break;
    case 'POST':
        cgi_post(req, res);
        break;
    case 'OPTIONS':
        cgi_options(req, res);
        break;
    default:
        mistake(1, res);
    }
}

exports.route = function(map) {
    _map = map;
    return cgi;
}
